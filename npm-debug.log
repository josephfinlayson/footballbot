0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'localtunnel' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose cache add [ 'localtunnel', null ]
5 verbose cache add name=undefined spec="localtunnel" args=["localtunnel",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'localtunnel',
6 verbose parsed url   path: 'localtunnel',
6 verbose parsed url   href: 'localtunnel' }
7 silly lockFile a0661bc8-localtunnel localtunnel
8 verbose lock localtunnel /home/joseph/.npm/a0661bc8-localtunnel.lock
9 silly lockFile a0661bc8-localtunnel localtunnel
10 silly lockFile a0661bc8-localtunnel localtunnel
11 verbose addNamed [ 'localtunnel', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile c752cf78-localtunnel localtunnel@
14 verbose lock localtunnel@ /home/joseph/.npm/c752cf78-localtunnel.lock
15 silly addNameRange { name: 'localtunnel', range: '*', hasData: false }
16 verbose registry.get localtunnel not expired, no request
17 silly addNameRange number 2 { name: 'localtunnel', range: '*', hasData: true }
18 silly addNameRange versions [ 'localtunnel',
18 silly addNameRange   [ '0.0.0',
18 silly addNameRange     '0.0.1',
18 silly addNameRange     '0.0.2',
18 silly addNameRange     '0.0.3',
18 silly addNameRange     '0.0.4',
18 silly addNameRange     '0.1.0',
18 silly addNameRange     '0.1.1',
18 silly addNameRange     '0.1.2',
18 silly addNameRange     '0.1.3',
18 silly addNameRange     '0.2.0',
18 silly addNameRange     '0.2.1',
18 silly addNameRange     '0.2.2',
18 silly addNameRange     '1.0.0',
18 silly addNameRange     '1.1.0',
18 silly addNameRange     '1.1.1',
18 silly addNameRange     '1.1.2',
18 silly addNameRange     '1.2.0',
18 silly addNameRange     '1.3.0' ] ]
19 verbose addNamed [ 'localtunnel', '1.3.0' ]
20 verbose addNamed [ '1.3.0', '1.3.0' ]
21 silly lockFile d49b597d-localtunnel-1-3-0 localtunnel@1.3.0
22 verbose lock localtunnel@1.3.0 /home/joseph/.npm/d49b597d-localtunnel-1-3-0.lock
23 silly lockFile d49b597d-localtunnel-1-3-0 localtunnel@1.3.0
24 silly lockFile d49b597d-localtunnel-1-3-0 localtunnel@1.3.0
25 silly lockFile c752cf78-localtunnel localtunnel@
26 silly lockFile c752cf78-localtunnel localtunnel@
27 silly resolved [ { author: { name: 'Roman Shtylman', email: 'shtylman@gmail.com' },
27 silly resolved     name: 'localtunnel',
27 silly resolved     description: 'expose localhost to the world',
27 silly resolved     version: '1.3.0',
27 silly resolved     repository:
27 silly resolved      { type: 'git',
27 silly resolved        url: 'git://github.com/shtylman/localtunnel.git' },
27 silly resolved     dependencies: { request: '2.11.4', optimist: '0.3.4', debug: '0.7.4' },
27 silly resolved     devDependencies: { mocha: '~1.17.0' },
27 silly resolved     scripts: { test: 'mocha --ui qunit --reporter list --timeout 10000 -- test/index.js' },
27 silly resolved     bin: { lt: './bin/client' },
27 silly resolved     main: './client.js',
27 silly resolved     readme: '# localtunnel [![Build Status](https://travis-ci.org/defunctzombie/localtunnel.png?branch=master)](https://travis-ci.org/defunctzombie/localtunnel) #\n\nlocaltunnel exposes your localhost to the world for easy testing and sharing! No need to mess with DNS or deploy just to have others test out your changes.\n\nGreat for working with browser testing tools like browserling or external api callback services like twilio which require a public url for callbacks.\n\n## installation ##\n\n```\nnpm install -g localtunnel\n```\n\nThis will install the localtunnel module globally and add the \'lt\' client cli tool to your PATH.\n\n## use ##\n\nAssuming your local server is running on port 8000, just use the ```lt``` command to start the tunnel.\n\n```\nlt --port 8000\n```\n\nThats it! It will connect to the tunnel server, setup the tunnel, and tell you what url to use for your testing. This url will remain active for the duration of your session; so feel free to share it with others for happy fun time!\n\nYou can restart your local server all you want, ```lt``` is smart enough to detect this and reconnect once it is back.\n\n### arguments\n\nBelow are some common arguments. See `lt --help` for additional arguments\n\n* `--subdomain` request a named subdomain on the localtunnel server (default is random characters)\n* `--local-host` proxy to a hostname other than localhost\n\n## API ##\n\nThe localtunnel client is also usable through an API (for test integration, automation, etc)\n\n### localtunnel(port [,opts], fn)\n\nCreates a new localtunnel to the specified local `port`. `fn` will be called once you have been assigned a public localtunnel url. `opts` can be used to request a specific `subdomain`.\n\n```javascript\nvar localtunnel = require(\'localtunnel\');\n\nlocaltunnel(port, function(err, tunnel) {\n    if (err) ...\n\n    // the assigned public url for your tunnel\n    // i.e. https://abcdefgjhij.localtunnel.me\n    tunnel.url;\n});\n```\n\n### opts\n\n* `subdomain` A *string* value requesting a specific subdomain on the proxy server. **Note** You may not actually receive this name depending on availablily.\n* `local_host` Proxy to this hostname instead of `localhost`. This will also cause the `Host` header to be re-written to this value in proxied requests.\n\n### Tunnel\n\nThe `tunnel` instance returned to your callback emits the following events\n\n|event|args|description|\n|----|----|----|\n|error|err|fires when an error happens on the tunnel|\n|close||fires when the tunnel has closed|\n\nThe `tunnel instance has the following methods\n\n|method|args|description|\n|----|----|----|\n|close||close the tunnel|\n\n## other clients ##\n\nClients in other languages\n\n*go* [gotunnelme](https://github.com/NoahShen/gotunnelme)\n\n## server ##\n\nSee defunctzombie/localtunnel-server for details on the server that powers localtunnel.\n\n## License ##\nMIT\n',
27 silly resolved     readmeFilename: 'README.md',
27 silly resolved     bugs: { url: 'https://github.com/shtylman/localtunnel/issues' },
27 silly resolved     homepage: 'https://github.com/shtylman/localtunnel',
27 silly resolved     _id: 'localtunnel@1.3.0',
27 silly resolved     _from: 'localtunnel@' } ]
28 info install localtunnel@1.3.0 into /usr/local/lib
29 info installOne localtunnel@1.3.0
30 info /usr/local/lib/node_modules/localtunnel unbuild
31 info preuninstall localtunnel@1.3.0
32 info uninstall localtunnel@1.3.0
33 verbose true,/usr/local/lib/node_modules,/usr/local/lib/node_modules unbuild localtunnel@1.3.0
34 verbose /usr/local/bin,[object Object] binRoot
35 info /usr/local/lib/node_modules/localtunnel unbuild
36 info preuninstall localtunnel@1.3.0
37 info uninstall localtunnel@1.3.0
38 verbose true,/usr/local/lib/node_modules,/usr/local/lib/node_modules unbuild localtunnel@1.3.0
39 verbose /usr/local/bin,[object Object] binRoot
40 error error rolling back Error: EACCES, unlink '/usr/local/bin/lt'
40 error error rolling back  localtunnel@1.3.0 { [Error: EACCES, unlink '/usr/local/bin/lt'] errno: 3, code: 'EACCES', path: '/usr/local/bin/lt' }
41 error Error: EACCES, unlink '/usr/local/bin/lt'
41 error  { [Error: EACCES, unlink '/usr/local/bin/lt'] errno: 3, code: 'EACCES', path: '/usr/local/bin/lt' }
42 error Please try running this command again as root/Administrator.
43 error System Linux 3.11.0-24-generic
44 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "-g" "localtunnel"
45 error cwd /home/joseph/hardware/footballbot
46 error node -v v0.10.26
47 error npm -v 1.4.3
48 error path /usr/local/bin/lt
49 error code EACCES
50 error errno 3
51 error stack Error: EACCES, unlink '/usr/local/bin/lt'
52 verbose exit [ 3, true ]
